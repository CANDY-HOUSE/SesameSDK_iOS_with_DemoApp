// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64_32-apple-watchos6.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SesameWatchKitSDK
import CoreBluetooth
import CoreData
import Foundation
import Security
@_exported import SesameWatchKitSDK
import Swift
import WatchKit
import os.log
import os
public protocol CHWifiModule2 : SesameWatchKitSDK.CHDevice {
  var sesame2Keys: [Swift.String : Swift.String] { get }
  var delegate: SesameWatchKitSDK.CHWifiModule2Delegate? { get set }
  var mechSetting: SesameWatchKitSDK.CHWifiModule2MechSettings? { get }
  var networkStatus: SesameWatchKitSDK.CHWifiModule2NetworkStatus? { get }
  func scanWifiSSID(result: @escaping SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>)
  func getCHDevices(result: @escaping SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>)
  func connectWifi(result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  func setWifiSSID(_ ssid: Swift.String, result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  func removeCHDevice(keyId: Swift.String, result: @escaping SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>)
  func insertCHDevice(_ device: SesameWatchKitSDK.CHDevice, result: @escaping SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>)
  func setWifiPassword(_ password: Swift.String, result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
}
@_hasMissingDesignatedInitializers public class CHEmpty {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CHSesame2HistoryData {
  final public let recordID: Swift.Int32
  final public let historyTag: Foundation.Data?
  final public let date: Foundation.Date
  final public let timestamp: Swift.UInt64
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHSesame2AutoLockUpdatedHistoryData : SesameWatchKitSDK.CHSesame2HistoryData {
  final public let enabledBefore: Swift.Int16
  final public let enabledAfter: Swift.Int16
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHSesame2MechSettingUpdatedHistoryData : SesameWatchKitSDK.CHSesame2HistoryData {
  final public let lockTargetBefore: Swift.Int16
  final public let unlockTargetBefore: Swift.Int16
  final public let lockTargetAfter: Swift.Int16
  final public let unlockTargetAfter: Swift.Int16
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHSesame2TimeChangedHistoryData : SesameWatchKitSDK.CHSesame2HistoryData {
  final public let timeAfter: Foundation.Date
  final public let timeBefore: Foundation.Date
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHSesame2BleAdvParameterUpdatedHistoryData : SesameWatchKitSDK.CHSesame2HistoryData {
  public var intervalBefore: Swift.Double {
    get
    set
  }
  public var intervalAfter: Swift.Double {
    get
    set
  }
  final public let dbmBefore: Swift.Int8
  final public let dbmAfter: Swift.Int8
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHSesame2DriveFailedHistoryData : SesameWatchKitSDK.CHSesame2HistoryData {
  public var stoppedPosition: Swift.Int16
  public var fsmRetCode: Swift.Int8
  public var deviceStatus: SesameWatchKitSDK.CHSesame2Status
  @objc deinit
}
public struct CHSesameHistoryPayload {
  public let histories: [SesameWatchKitSDK.CHSesame2History]
  public var cursor: Swift.UInt?
}
public enum CHSesame2History {
  case manualElse(SesameWatchKitSDK.CHSesame2HistoryData)
  case manualLocked(SesameWatchKitSDK.CHSesame2HistoryData)
  case manualUnlocked(SesameWatchKitSDK.CHSesame2HistoryData)
  case bleLock(SesameWatchKitSDK.CHSesame2HistoryData)
  case bleUnlock(SesameWatchKitSDK.CHSesame2HistoryData)
  case wm2Lock(SesameWatchKitSDK.CHSesame2HistoryData)
  case wm2Unlock(SesameWatchKitSDK.CHSesame2HistoryData)
  case webLock(SesameWatchKitSDK.CHSesame2HistoryData)
  case webUnlock(SesameWatchKitSDK.CHSesame2HistoryData)
  case autoLock(SesameWatchKitSDK.CHSesame2HistoryData)
  case autoLockUpdated(SesameWatchKitSDK.CHSesame2AutoLockUpdatedHistoryData)
  case mechSettingUpdated(SesameWatchKitSDK.CHSesame2MechSettingUpdatedHistoryData)
  case timeChanged(SesameWatchKitSDK.CHSesame2TimeChangedHistoryData)
  case bleAdvParameterUpdated(SesameWatchKitSDK.CHSesame2BleAdvParameterUpdatedHistoryData)
  case driveLocked(SesameWatchKitSDK.CHSesame2HistoryData)
  case driveUnlocked(SesameWatchKitSDK.CHSesame2HistoryData)
  case driveClick(SesameWatchKitSDK.CHSesame2HistoryData)
  case manualClick(SesameWatchKitSDK.CHSesame2HistoryData)
  case bleClick(SesameWatchKitSDK.CHSesame2HistoryData)
  case wm2Click(SesameWatchKitSDK.CHSesame2HistoryData)
  case webClick(SesameWatchKitSDK.CHSesame2HistoryData)
  case driveFailed(SesameWatchKitSDK.CHSesame2DriveFailedHistoryData)
  case none(SesameWatchKitSDK.CHSesame2HistoryData)
}
public protocol CHSesameBotDelegate : SesameWatchKitSDK.CHSesame2StatusDelegate {
  func onMechStatusChanged(device: SesameWatchKitSDK.CHSesameBot, status: SesameWatchKitSDK.CHSesameProtocolMechStatus, intention: SesameWatchKitSDK.CHSesame2Intention)
}
public protocol CHSesameBot : SesameWatchKitSDK.CHSesameLock {
  var delegate: SesameWatchKitSDK.CHSesameBotDelegate? { get set }
  var mechSetting: SesameWatchKitSDK.CHSesameBotMechSettings? { get set }
  var deviceShadowStatus: SesameWatchKitSDK.CHSesame2ShadowStatus? { get }
  var intention: SesameWatchKitSDK.CHSesame2Intention { get }
  func toggle(historytag: Foundation.Data?, result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  func lock(historytag: Foundation.Data?, result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  func click(historytag: Foundation.Data?, result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  func unlock(historytag: Foundation.Data?, result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  func updateSetting(historytag: Foundation.Data?, setting: SesameWatchKitSDK.CHSesameBotMechSettings, result: @escaping SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>)
}
extension CHSesameBot {
  public func toggle(result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  public func lock(result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  public func click(result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  public func unlock(result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  public func updateSetting(setting: SesameWatchKitSDK.CHSesameBotMechSettings, result: @escaping SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>)
}
extension CHSesameBotDelegate {
  public func onMechStatusChanged(device: SesameWatchKitSDK.CHSesameBot, status: SesameWatchKitSDK.CHSesameProtocolMechStatus, intention: SesameWatchKitSDK.CHSesame2Intention)
}
public protocol CHWifiModule2Delegate : AnyObject {
  func onBleDeviceStatusChanged(device: SesameWatchKitSDK.CHWifiModule2, status: SesameWatchKitSDK.CHSesame2Status)
  func onNetworkStatusChanged(device: SesameWatchKitSDK.CHWifiModule2, status: SesameWatchKitSDK.CHWifiModule2NetworkStatus)
  func onAPSettingChanged(device: SesameWatchKitSDK.CHWifiModule2, settings: SesameWatchKitSDK.CHWifiModule2MechSettings)
  func onSesame2KeysChanged(device: SesameWatchKitSDK.CHWifiModule2, sesame2keys: [Swift.String : Swift.String])
  func onOTAProgress(device: SesameWatchKitSDK.CHWifiModule2, percent: Swift.UInt8)
  func onScanWifiSID(device: SesameWatchKitSDK.CHWifiModule2, ssid: SesameWatchKitSDK.CHSSID)
}
extension CHWifiModule2Delegate {
  public func onBleDeviceStatusChanged(device: SesameWatchKitSDK.CHWifiModule2, status: SesameWatchKitSDK.CHSesame2Status)
  public func onNetworkStatusChanged(device: SesameWatchKitSDK.CHWifiModule2, status: SesameWatchKitSDK.CHWifiModule2NetworkStatus)
  public func onAPSettingChanged(device: SesameWatchKitSDK.CHWifiModule2, settings: SesameWatchKitSDK.CHWifiModule2MechSettings)
  public func onSesame2KeysChanged(device: SesameWatchKitSDK.CHWifiModule2, sesame2keys: [Swift.String : Swift.String])
  public func onOTAProgress(device: SesameWatchKitSDK.CHWifiModule2, percent: Swift.UInt8)
  public func onScanWifiSID(device: SesameWatchKitSDK.CHWifiModule2, ssid: SesameWatchKitSDK.CHSSID)
}
public protocol CHExtensionListenerDelegate : AnyObject {
  func receiveExtensionNotification(_ notificationIdentifier: Swift.String)
}
final public class CHExtensionListener {
  public static let containingAppDidBecomeActive: Swift.String
  public static let containingAppWillResignActive: Swift.String
  public static let widgetDidBecomeActive: Swift.String
  public static let widgetWillResignActive: Swift.String
  public static let shortcutDidBecomeActive: Swift.String
  public static let shortcutWillResignActive: Swift.String
  public init()
  final public func registerObserver<P>(_ listener: P, withIdentifier identifier: Swift.String) where P : SesameWatchKitSDK.CHExtensionListenerDelegate
  final public func unregisterIdentifier(_ identifier: Swift.String)
  final public func unregisterAll()
  public static func post(notification: Swift.String)
  @objc deinit
}
public enum CHWifiModule2Sesame2LockStatus : Swift.UInt8, Swift.CustomStringConvertible {
  case disconnected
  case connected
  case deviceLoggedIn
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct CHSSID : Swift.Equatable {
  public let name: Swift.String
  public let rssi: Swift.Int16
  public static func == (lhs: SesameWatchKitSDK.CHSSID, rhs: SesameWatchKitSDK.CHSSID) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class CHConfiguration {
  public static let shared: SesameWatchKitSDK.CHConfiguration
  final public var apiKey: Swift.String
  final public var clientId: Swift.String
  final public var appGroup: Swift.String
  @objc deinit
}
public protocol CHSesame2StatusDelegate : AnyObject {
  func onBleDeviceStatusChanged(device: SesameWatchKitSDK.CHSesameLock, status: SesameWatchKitSDK.CHSesame2Status, shadowStatus: SesameWatchKitSDK.CHSesame2ShadowStatus?)
}
public protocol CHSesame2Delegate : SesameWatchKitSDK.CHSesame2StatusDelegate {
  func onMechSettingChanged(device: SesameWatchKitSDK.CHSesame2, settings: SesameWatchKitSDK.CHSesame2MechSettings)
  func onHistoryReceived(device: SesameWatchKitSDK.CHSesame2, result: Swift.Result<SesameWatchKitSDK.CHResultState<[SesameWatchKitSDK.CHSesame2History]>, Swift.Error>)
  func onMechStatusChanged(device: SesameWatchKitSDK.CHSesame2, status: SesameWatchKitSDK.CHSesameProtocolMechStatus, intention: SesameWatchKitSDK.CHSesame2Intention)
}
public protocol CHSesame2 : SesameWatchKitSDK.CHSesameLock {
  var deviceStatus: SesameWatchKitSDK.CHSesame2Status { get }
  var intention: SesameWatchKitSDK.CHSesame2Intention { get }
  var delegate: SesameWatchKitSDK.CHSesame2Delegate? { get set }
  var mechStatus: SesameWatchKitSDK.CHSesameProtocolMechStatus? { get }
  var mechSetting: SesameWatchKitSDK.CHSesame2MechSettings? { get }
  var deviceShadowStatus: SesameWatchKitSDK.CHSesame2ShadowStatus? { get }
  func toggle(result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  func getVersionTag(result: @escaping (SesameWatchKitSDK.CHResult<Swift.String>))
  func getAutolockSetting(result: @escaping (SesameWatchKitSDK.CHResult<Swift.Int>))
  func lock(historytag: Foundation.Data?, result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  func unlock(historytag: Foundation.Data?, result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  func toggle(historytag: Foundation.Data?, result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  func disableAutolock(historytag: Foundation.Data?, result: @escaping (SesameWatchKitSDK.CHResult<Swift.Int>))
  func getHistories(cursor: Swift.UInt?, _ result: @escaping SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHSesameHistoryPayload>)
  func getBleAdvParameter(_ result: @escaping SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHSesame2BleAdvParameter>)
  func enableAutolock(historytag: Foundation.Data?, delay: Swift.Int, result: @escaping (SesameWatchKitSDK.CHResult<Swift.Int>))
  func configureLockPosition(historytag: Foundation.Data?, lockTarget: Swift.Int16, unlockTarget: Swift.Int16, result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  func updateBleAdvParameter(historytag: Foundation.Data?, interval: Swift.Double, txPower: Swift.Int8, _ result: @escaping SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHSesame2BleAdvParameter>)
}
extension CHSesame2 {
  public func lock(result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  public func unlock(result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  public func toggle(result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  public func disableAutolock(result: @escaping (SesameWatchKitSDK.CHResult<Swift.Int>))
  public func enableAutolock(delay: Swift.Int, result: @escaping (SesameWatchKitSDK.CHResult<Swift.Int>))
  public func configureLockPosition(lockTarget: Swift.Int16, unlockTarget: Swift.Int16, result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  public func updateBleAdvParameter(interval: Swift.Double, txPower: Swift.Int8, _ result: @escaping SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHSesame2BleAdvParameter>)
}
extension CHSesame2Delegate {
  public func onMechSettingChanged(device: SesameWatchKitSDK.CHSesame2, settings: SesameWatchKitSDK.CHSesame2MechSettings)
  public func onHistoryReceived(device: SesameWatchKitSDK.CHSesame2, result: Swift.Result<SesameWatchKitSDK.CHResultState<[SesameWatchKitSDK.CHSesame2History]>, Swift.Error>)
  public func onMechStatusChanged(device: SesameWatchKitSDK.CHSesame2, status: SesameWatchKitSDK.CHSesameProtocolMechStatus, intention: SesameWatchKitSDK.CHSesame2Intention)
  public func onBleDeviceStatusChanged(device: SesameWatchKitSDK.CHSesame2, status: SesameWatchKitSDK.CHSesame2Status, shadowStatus: SesameWatchKitSDK.CHSesame2ShadowStatus?)
}
public enum CHSesameBotUserPreDir : Swift.UInt8 {
  case normal
  case reversed
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum CHSesameBotButtonMode : Swift.UInt8 {
  case click
  case toggle
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct CHSesameBotLockSecondsConfiguration {
  public var lockSeconds: Swift.UInt8
  public var unlockSeconds: Swift.UInt8
  public var clickLockSeconds: Swift.UInt8
  public var clickHoldSeconds: Swift.UInt8
  public var clickUnlockSeconds: Swift.UInt8
}
public protocol CHDevice : AnyObject {
  var rssi: Foundation.NSNumber? { get }
  var deviceId: Foundation.UUID! { get }
  var isRegistered: Swift.Bool { get }
  var txPowerLevel: Swift.Int? { get }
  var productModel: SesameWatchKitSDK.CHProductModel { get }
  var deviceStatus: SesameWatchKitSDK.CHSesame2Status { get }
  func getKey() -> SesameWatchKitSDK.CHDeviceKey?
  func connect(result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  func dropKey(result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  func disconnect(result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  func getVersionTag(result: @escaping (SesameWatchKitSDK.CHResult<Swift.String>))
  func updateFirmware(result: @escaping SesameWatchKitSDK.CHResult<CoreBluetooth.CBPeripheral?>)
}
extension CHDevice {
  public func getKey() -> SesameWatchKitSDK.CHDeviceKey?
}
public protocol CHSesameLock : SesameWatchKitSDK.CHDevice {
  var isConnectedByWM2: Swift.Bool { get set }
  var mechStatus: SesameWatchKitSDK.CHSesameProtocolMechStatus? { get }
  func getHistoryTag() -> Foundation.Data?
  func getTimeSignature() -> Swift.String
  func setHistoryTag(_ tag: Foundation.Data, result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
}
extension CHSesameLock {
  public func getKey() -> SesameWatchKitSDK.CHDeviceKey?
  public func getTimeSignature() -> Swift.String
  public func setHistoryTag(_ tag: Foundation.Data, result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  public func getHistoryTag() -> Foundation.Data?
  public func createGuestKey(result: @escaping SesameWatchKitSDK.CHResult<Swift.String>)
  public func enableNotification(token: Swift.String, name: Swift.String, result: @escaping SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>)
  public func disableNotification(token: Swift.String, name: Swift.String, result: @escaping SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>)
  public func isNotificationEnabled(token: Swift.String, name: Swift.String, result: @escaping SesameWatchKitSDK.CHResult<Swift.Bool>)
  public func getSesameLockStatus(result: @escaping SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>)
}
public protocol CHSesameProtocolMechStatus {
  var data: Foundation.Data { get }
  var position: Swift.Int16 { get }
  var target: Swift.Int16 { get }
  var isClutchFailed: Swift.Bool { get }
  var isInLockRange: Swift.Bool { get }
  var isInUnlockRange: Swift.Bool { get }
  var isBatteryCritical: Swift.Bool { get }
  func getBatteryVoltage() -> Swift.Float
  func getBatteryPrecentage() -> Swift.Int
  func retCodeType() -> SesameWatchKitSDK.CHSesame2RetCodeType
}
public protocol CHSesame2MechSettings {
  var lockPosition: Swift.Int16 { get }
  var unlockPosition: Swift.Int16 { get }
  func isConfigured() -> Swift.Bool
}
public enum CHSesame2Intention : Swift.String {
  case locking, unlocking, movingToUnknownTarget, idle
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol CHSesame2BleAdvParameter {
  var interval: Swift.Double { get }
  var txPower: Swift.Int8 { get }
}
public enum CHSesame2ShadowStatus : Swift.Equatable {
  case locked(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .unlogined, desc: Swift.String = "locked")
  case unlocked(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .unlogined, desc: Swift.String = "unlocked")
  case moved(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .unlogined, desc: Swift.String = "moved")
  case lockedWifiModule2(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .logined, desc: Swift.String = "locked_wm2")
  case unlockedWifiModule2(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .logined, desc: Swift.String = "unlocked_wm2")
  case movedWifiModule2(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .logined, desc: Swift.String = "moved_wm2")
  public func loginStatus() -> SesameWatchKitSDK.CHDeviceLoginStatus
  public func description() -> Swift.String
  public static func == (a: SesameWatchKitSDK.CHSesame2ShadowStatus, b: SesameWatchKitSDK.CHSesame2ShadowStatus) -> Swift.Bool
}
public enum CHSesame2Status : Swift.Equatable {
  case noBleSignal(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .unlogined, desc: Swift.String = "noBleSignal")
  case receivedBle(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .unlogined, desc: Swift.String = "receivedBle")
  case bleConnecting(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .unlogined, desc: Swift.String = "bleConnecting")
  case reset(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .unlogined, desc: Swift.String = "reset")
  case waitingGatt(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .unlogined, desc: Swift.String = "waitingGatt")
  case bleLogining(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .unlogined, desc: Swift.String = "bleLogining")
  case readyToRegister(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .unlogined, desc: Swift.String = "readyToRegister")
  case waitingForAuth(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .unlogined, desc: Swift.String = "waitingForAuth")
  case registering(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .unlogined, desc: Swift.String = "registering")
  case dfumode(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .unlogined, desc: Swift.String = "dfumode")
  case locked(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .logined, desc: Swift.String = "locked")
  case unlocked(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .logined, desc: Swift.String = "unlocked")
  case moved(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .logined, desc: Swift.String = "moved")
  case noSettings(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .logined, desc: Swift.String = "noSettings")
  case waitApConnect(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .logined, desc: Swift.String = "waitApConnect")
  case busy(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .unlogined, desc: Swift.String = "busy")
  case iotConnected(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .logined, desc: Swift.String = "iotConnected")
  case iotDisconnected(loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus = .logined, desc: Swift.String = "iotDisconnected")
  public var description: Swift.String {
    get
  }
  public var loginStatus: SesameWatchKitSDK.CHDeviceLoginStatus {
    get
  }
  public static func == (a: SesameWatchKitSDK.CHSesame2Status, b: SesameWatchKitSDK.CHSesame2Status) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class CHAccountManager {
  public static let shared: SesameWatchKitSDK.CHAccountManager!
  @objc deinit
}
public enum CHProductModel : Swift.UInt16 {
  case sesame2
  case wifiModule2
  case sesameBot
  case bikeLock
  case sesame4
  public func productType() -> Swift.Int
  public func deviceModel() -> Swift.String
  public func isLock() -> Swift.Bool
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public protocol CHSesameBikeMechSettings {
  var unlockSecs: SesameWatchKitSDK.CHSesameBikeUnlockSecs { get }
  func isConfigured() -> Swift.Bool
}
@objc public class CHDeviceKey : ObjectiveC.NSObject, Foundation.NSCopying, Swift.Codable {
  public var deviceUUID: Foundation.UUID
  public var deviceModel: Swift.String
  public var historyTag: Foundation.Data?
  public var keyIndex: Swift.String
  public var secretKey: Swift.String
  public var sesame2PublicKey: Swift.String
  public init(deviceUUID: Foundation.UUID, deviceModel: Swift.String, historyTag: Foundation.Data?, keyIndex: Swift.String, secretKey: Swift.String, sesame2PublicKey: Swift.String)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum CHSesame2RetCodeType : Swift.UInt8 {
  case none
  case success
  case failEngage
  case failMoveStart
  case failMove
  case failCheck
  case failDetach
  case failLoosen
  case aborted
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct CHSesameBikeUnlockSecs {
  public var forward: Swift.Float {
    get
  }
  public var hold: Swift.Float {
    get
  }
  public var backward: Swift.Float {
    get
  }
  public init(forward: Swift.Float, hold: Swift.Float, backward: Swift.Float)
}
@_hasMissingDesignatedInitializers public class CHWifiModule2MechSettings {
  public var wifiSSID: Swift.String? {
    get
  }
  public var wifiPassword: Swift.String? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CHWifiModule2NetworkStatus {
  public var isAPWork: Swift.Bool? {
    get
  }
  public var isNetwork: Swift.Bool? {
    get
  }
  public var isIoTWork: Swift.Bool? {
    get
  }
  public var isBindingAPWork: Swift.Bool {
    get
  }
  public var isConnectingNetwork: Swift.Bool {
    get
  }
  public var isConnectingIoT: Swift.Bool {
    get
  }
  @objc deinit
}
public struct CHSesameBotMechSettings {
  public var userPrefDir: SesameWatchKitSDK.CHSesameBotUserPreDir
  public var lockSecConfig: SesameWatchKitSDK.CHSesameBotLockSecondsConfiguration
  public var buttonMode: SesameWatchKitSDK.CHSesameBotButtonMode
  public func isConfigured() -> Swift.Bool
}
public typealias CHResult<T> = (Swift.Result<SesameWatchKitSDK.CHResultState<T>, Swift.Error>) -> ()
@_hasMissingDesignatedInitializers public class CHResultState<T> {
  public var data: T
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHResultStateCache<T> : SesameWatchKitSDK.CHResultState<T> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHResultStateNetworks<T> : SesameWatchKitSDK.CHResultState<T> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHResultStateBLE<T> : SesameWatchKitSDK.CHResultState<T> {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHBleManager : ObjectiveC.NSObject {
  public static let shared: SesameWatchKitSDK.CHBleManager
  weak public var delegate: SesameWatchKitSDK.CHBleManagerDelegate?
  weak public var statusDelegate: SesameWatchKitSDK.CHBleStatusDelegate?
  public var scanning: SesameWatchKitSDK.CHScanStatus {
    get
  }
  public func disableScan(result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  public func enableScan(result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  public func disConnectAll(result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
  @objc deinit
}
extension CHBleManager : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
}
extension CHBleManager : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
public protocol CHSesameBikeDelegate : SesameWatchKitSDK.CHSesame2StatusDelegate {
  func onMechStatusChanged(device: SesameWatchKitSDK.CHSesameBike, status: SesameWatchKitSDK.CHSesameProtocolMechStatus, intention: SesameWatchKitSDK.CHSesame2Intention)
}
public protocol CHSesameBike : SesameWatchKitSDK.CHSesameLock {
  var delegate: SesameWatchKitSDK.CHSesameBikeDelegate? { get set }
  var mechSetting: SesameWatchKitSDK.CHSesameBikeMechSettings? { get }
  var deviceShadowStatus: SesameWatchKitSDK.CHSesame2ShadowStatus? { get }
  var intention: SesameWatchKitSDK.CHSesame2Intention { get }
  func unlock(historytag: Foundation.Data?, result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
}
extension CHSesameBike {
  public func unlock(result: @escaping (SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>))
}
extension CHSesameBikeDelegate {
  public func onMechStatusChanged(device: SesameWatchKitSDK.CHSesameBike, status: SesameWatchKitSDK.CHSesameProtocolMechStatus, intention: SesameWatchKitSDK.CHSesame2Intention)
}
public struct CHGuestKey : Swift.Codable {
  public let guestKeyId: Swift.String
  public var keyName: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol CHBleManagerDelegate : AnyObject {
  func didDiscoverUnRegisteredCHDevices(_ devices: [SesameWatchKitSDK.CHDevice])
}
public enum CHScanStatus : Swift.Equatable {
  case enable(bleStatus: SesameWatchKitSDK.CHBleStatus = CHBleStatus.opened)
  case disable(bleStatus: SesameWatchKitSDK.CHBleStatus = CHBleStatus.opened)
  case bleClose(bleStatus: SesameWatchKitSDK.CHBleStatus = CHBleStatus.closed)
  case error(bleStatus: SesameWatchKitSDK.CHBleStatus = CHBleStatus.opened)
  public var bleStatus: SesameWatchKitSDK.CHBleStatus {
    get
  }
  public var plainText: Swift.String {
    get
  }
  public static func == (a: SesameWatchKitSDK.CHScanStatus, b: SesameWatchKitSDK.CHScanStatus) -> Swift.Bool
}
public enum CHBleStatus : Swift.String {
  case opened
  case closed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol CHBleStatusDelegate : AnyObject {
  func didScanChange(status: SesameWatchKitSDK.CHScanStatus)
}
extension CHBleManagerDelegate {
  public func didDiscoverUnRegisteredCHDevices(_ devices: [SesameWatchKitSDK.CHDevice])
}
public enum CHDeviceLoginStatus : Swift.String {
  case logined
  case unlogined
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public var Sesame2WatchKitSDKVersionString: Swift.String? {
  get
}
public var Sesame2WatchKitSDKBundleVersionString: Swift.String? {
  get
}
public var Sesame2WatchKitSDKVersion: Swift.UInt? {
  get
}
public var Sesame2WatchKitSDKBundleVersion: Swift.UInt? {
  get
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHDeviceManager : ObjectiveC.NSObject {
  public static let shared: SesameWatchKitSDK.CHDeviceManager
  public func getCHDevices(result: @escaping (SesameWatchKitSDK.CHResult<[SesameWatchKitSDK.CHDevice]>))
  public func receiveCHDeviceKeys(_ deviceKeys: [SesameWatchKitSDK.CHDeviceKey], result: @escaping (SesameWatchKitSDK.CHResult<[SesameWatchKitSDK.CHDevice]>))
  public func receiveCHDeviceKeys(_ deviceKeys: SesameWatchKitSDK.CHDeviceKey..., result: @escaping (SesameWatchKitSDK.CHResult<[SesameWatchKitSDK.CHDevice]>))
  @objc deinit
}
extension CHDeviceManager {
  public func disableNotification(deviceId: Swift.String, token: Swift.String, name: Swift.String, result: @escaping SesameWatchKitSDK.CHResult<SesameWatchKitSDK.CHEmpty>)
}
@_hasMissingDesignatedInitializers public class CHServerError : Swift.Codable {
  public var message: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(CHDeviceMO) public class CHDeviceMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension CHDeviceMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SesameWatchKitSDK.CHDeviceMO>
  @objc @NSManaged dynamic public var deviceModel: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var deviceUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var historyTag: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var keyIndex: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var secretKey: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sesame2PublicKey: Swift.String? {
    @objc get
    @objc set
  }
}
extension CHDeviceMO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension SesameWatchKitSDK.CHWifiModule2Sesame2LockStatus : Swift.Equatable {}
extension SesameWatchKitSDK.CHWifiModule2Sesame2LockStatus : Swift.Hashable {}
extension SesameWatchKitSDK.CHWifiModule2Sesame2LockStatus : Swift.RawRepresentable {}
extension SesameWatchKitSDK.CHSesameBotUserPreDir : Swift.Equatable {}
extension SesameWatchKitSDK.CHSesameBotUserPreDir : Swift.Hashable {}
extension SesameWatchKitSDK.CHSesameBotUserPreDir : Swift.RawRepresentable {}
extension SesameWatchKitSDK.CHSesameBotButtonMode : Swift.Equatable {}
extension SesameWatchKitSDK.CHSesameBotButtonMode : Swift.Hashable {}
extension SesameWatchKitSDK.CHSesameBotButtonMode : Swift.RawRepresentable {}
extension SesameWatchKitSDK.CHSesame2Intention : Swift.Equatable {}
extension SesameWatchKitSDK.CHSesame2Intention : Swift.Hashable {}
extension SesameWatchKitSDK.CHSesame2Intention : Swift.RawRepresentable {}
extension SesameWatchKitSDK.CHProductModel : Swift.Equatable {}
extension SesameWatchKitSDK.CHProductModel : Swift.Hashable {}
extension SesameWatchKitSDK.CHProductModel : Swift.RawRepresentable {}
extension SesameWatchKitSDK.CHSesame2RetCodeType : Swift.Equatable {}
extension SesameWatchKitSDK.CHSesame2RetCodeType : Swift.Hashable {}
extension SesameWatchKitSDK.CHSesame2RetCodeType : Swift.RawRepresentable {}
extension SesameWatchKitSDK.CHBleStatus : Swift.Equatable {}
extension SesameWatchKitSDK.CHBleStatus : Swift.Hashable {}
extension SesameWatchKitSDK.CHBleStatus : Swift.RawRepresentable {}
extension SesameWatchKitSDK.CHDeviceLoginStatus : Swift.Equatable {}
extension SesameWatchKitSDK.CHDeviceLoginStatus : Swift.Hashable {}
extension SesameWatchKitSDK.CHDeviceLoginStatus : Swift.RawRepresentable {}
