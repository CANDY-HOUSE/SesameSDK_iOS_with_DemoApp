// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SesameSDK
import AWSAPIGateway
import AWSCore
import AWSIoT
import CoreBluetooth
import CoreData
import Foundation
import Security
@_exported import SesameSDK
import Swift
import SystemConfiguration
import UIKit
public var Sesame2SDKVersionString: Swift.String? {
  get
}
public var Sesame2SDKBundleVersionString: Swift.String? {
  get
}
public var Sesame2SDKVersion: Swift.UInt? {
  get
}
public var Sesame2SDKBundleVersion: Swift.UInt? {
  get
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (SesameSDK.Reachability) -> ()
  public typealias NetworkUnreachable = (SesameSDK.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: SesameSDK.Reachability.NetworkStatus, b: SesameSDK.Reachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: SesameSDK.Reachability.Connection, b: SesameSDK.Reachability.Connection) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var whenReachable: SesameSDK.Reachability.NetworkReachable?
  public var whenUnreachable: SesameSDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: SesameSDK.Reachability.Connection {
    get
  }
  public var connection: SesameSDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public protocol CHSesame2 : AnyObject {
  var deviceId: Foundation.UUID! { get }
  var delegate: SesameSDK.CHSesame2Delegate? { get set }
  var rssi: Foundation.NSNumber? { get }
  var txPowerLevel: Swift.Int? { get }
  var isRegistered: Swift.Bool { get }
  var deviceStatus: SesameSDK.CHSesame2Status { get }
  var deviceShadowStatus: SesameSDK.CHSesame2ShadowStatus? { get }
  var mechStatus: SesameSDK.CHSesame2MechStatus? { get }
  var mechSetting: SesameSDK.CHSesame2MechSettings? { get }
  var intention: SesameSDK.CHSesame2Intention { get }
  func lock(historytag: Foundation.Data?, result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  func unlock(historytag: Foundation.Data?, result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  func toggle(result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  func connect(result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  func disconnect(result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  func registerSesame2(_ result: @escaping SesameSDK.CHResult<SesameSDK.CHEmpty>)
  func resetSesame2(result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  func configureLockPosition(historytag: Foundation.Data?, lockTarget: Swift.Int16, unlockTarget: Swift.Int16, result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  func getAutolockSetting(result: @escaping (SesameSDK.CHResult<Swift.Int>))
  func enableAutolock(historytag: Foundation.Data?, delay: Swift.Int, result: @escaping (SesameSDK.CHResult<Swift.Int>))
  func disableAutolock(historytag: Foundation.Data?, result: @escaping (SesameSDK.CHResult<Swift.Int>))
  func updateFirmware(_ result: @escaping SesameSDK.CHResult<CoreBluetooth.CBPeripheral?>)
  func getVersionTag(result: @escaping (SesameSDK.CHResult<Swift.String>))
  func setHistoryTag(_ tag: Foundation.Data, result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  func getHistoryTag() -> Foundation.Data?
  func dropKey(result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  func getKey() -> Swift.String?
  func getHistories(page: Swift.UInt, _ result: @escaping SesameSDK.CHResult<[SesameSDK.CHSesame2History]>)
  func getBleAdvParameter(_ result: @escaping SesameSDK.CHResult<SesameSDK.Sesame2BleAdvParameter>)
  func toggle(historytag: Foundation.Data?, result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  func updateBleAdvParameter(historytag: Foundation.Data?, interval: Swift.Double, txPower: Swift.Int8, _ result: @escaping SesameSDK.CHResult<SesameSDK.Sesame2BleAdvParameter>)
}
extension CHSesame2 {
  public func lock(result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  public func unlock(result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  public func toggle(result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  public func configureLockPosition(lockTarget: Swift.Int16, unlockTarget: Swift.Int16, result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  public func updateBleAdvParameter(interval: Swift.Double, txPower: Swift.Int8, _ result: @escaping SesameSDK.CHResult<SesameSDK.Sesame2BleAdvParameter>)
  public func enableAutolock(delay: Swift.Int, result: @escaping (SesameSDK.CHResult<Swift.Int>))
  public func disableAutolock(result: @escaping (SesameSDK.CHResult<Swift.Int>))
}
public enum CHIoTOperator {
  case sesame2(SesameSDK.CHSesame2)
  case custom(thing: Swift.String, shadow: Swift.String)
}
public protocol CHSesame2Delegate : AnyObject {
  func onBleDeviceStatusChanged(device: SesameSDK.CHSesame2, status: SesameSDK.CHSesame2Status, shadowStatus: SesameSDK.CHSesame2ShadowStatus?)
  func onMechStatusChanged(device: SesameSDK.CHSesame2, status: SesameSDK.CHSesame2MechStatus, intention: SesameSDK.CHSesame2Intention)
  func onHistoryReceived(device: SesameSDK.CHSesame2, result: Swift.Result<SesameSDK.CHResultState<[SesameSDK.CHSesame2History]>, Swift.Error>)
}
extension CHSesame2Delegate {
  public func onBleDeviceStatusChanged(device: SesameSDK.CHSesame2, status: SesameSDK.CHSesame2Status)
  public func onMechStatusChanged(device: SesameSDK.CHSesame2, status: SesameSDK.CHSesame2MechStatus, intention: SesameSDK.CHSesame2Intention)
  public func onHistoryReceived(device: SesameSDK.CHSesame2, result: Swift.Result<SesameSDK.CHResultState<[SesameSDK.CHSesame2History]>, Swift.Error>)
}
@_hasMissingDesignatedInitializers final public class Heckel<T> where T : SesameSDK.DiffAware {
  final public func diff(old: [T], new: [T]) -> [SesameSDK.Change<T>]
  @objc deinit
}
public struct Insert<T> {
  public let item: T
  public let index: Swift.Int
}
public struct Delete<T> {
  public let item: T
  public let index: Swift.Int
}
public struct Replace<T> {
  public let oldItem: T
  public let newItem: T
  public let index: Swift.Int
}
public struct Move<T> {
  public let item: T
  public let fromIndex: Swift.Int
  public let toIndex: Swift.Int
}
public enum Change<T> {
  case insert(SesameSDK.Insert<T>)
  case delete(SesameSDK.Delete<T>)
  case replace(SesameSDK.Replace<T>)
  case move(SesameSDK.Move<T>)
  public var insert: SesameSDK.Insert<T>? {
    get
  }
  public var delete: SesameSDK.Delete<T>? {
    get
  }
  public var replace: SesameSDK.Replace<T>? {
    get
  }
  public var move: SesameSDK.Move<T>? {
    get
  }
}
public func diff<T>(old: [T], new: [T]) -> [SesameSDK.Change<T>] where T : SesameSDK.DiffAware
public func preprocess<T>(old: [T], new: [T]) -> [SesameSDK.Change<T>]?
@_hasMissingDesignatedInitializers open class SwKeyConvert {
  public enum SwError : Swift.Error {
    case invalidKey
    case badPassphrase
    case keyNotEncrypted
    public static var debugLevel: Swift.Int
    public static func == (a: SesameSDK.SwKeyConvert.SwError, b: SesameSDK.SwKeyConvert.SwError) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  @_hasMissingDesignatedInitializers open class PrivateKey {
    public static func pemToPKCS1DER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func derToPKCS1PEM(_ derKey: Foundation.Data) -> Swift.String
    public typealias EncMode = SesameSDK.PEM.EncryptedPrivateKey.EncMode
    public static func encryptPEM(_ pemKey: Swift.String, passphrase: Swift.String, mode: SesameSDK.SwKeyConvert.PrivateKey.EncMode) throws -> Swift.String
    public static func decryptPEM(_ pemKey: Swift.String, passphrase: Swift.String) throws -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class PublicKey {
    public static func pemToPKCS1DER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func pemToPKCS8DER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func derToPKCS1PEM(_ derKey: Foundation.Data) -> Swift.String
    public static func derToPKCS8PEM(_ derKey: Foundation.Data) -> Swift.String
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class PKCS8 {
  @_hasMissingDesignatedInitializers open class PrivateKey {
    public static func getPKCS1DEROffset(_ derKey: Foundation.Data) -> Swift.Int?
    public static func stripHeaderIfAny(_ derKey: Foundation.Data) -> Foundation.Data?
    public static func hasCorrectHeader(_ derKey: Foundation.Data) -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class PublicKey {
    public static func addHeader(_ derKey: Foundation.Data) -> Foundation.Data
    public static func getPKCS1DEROffset(_ derKey: Foundation.Data) -> Swift.Int?
    public static func stripHeaderIfAny(_ derKey: Foundation.Data) -> Foundation.Data?
    public static func hasCorrectHeader(_ derKey: Foundation.Data) -> Swift.Bool
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class PEM {
  public enum SwError : Swift.Error {
    case parse(Swift.String)
    case badPassphrase
    case keyNotEncrypted
    public static var debugLevel: Swift.Int
  }
  @_hasMissingDesignatedInitializers open class PrivateKey {
    public static func toDER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func toPEM(_ derKey: Foundation.Data) -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class PublicKey {
    public static func toDER(_ pemKey: Swift.String) throws -> Foundation.Data
    public static func toPEM(_ derKey: Foundation.Data) -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class EncryptedPrivateKey {
    public enum EncMode {
      case aes128CBC, aes256CBC
      public static func == (a: SesameSDK.PEM.EncryptedPrivateKey.EncMode, b: SesameSDK.PEM.EncryptedPrivateKey.EncMode) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    public static func toDER(_ pemKey: Swift.String, passphrase: Swift.String) throws -> Foundation.Data
    public static func toPEM(_ derKey: Foundation.Data, passphrase: Swift.String, mode: SesameSDK.PEM.EncryptedPrivateKey.EncMode) -> Swift.String
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class CC {
  public typealias CCCryptorStatus = Swift.Int32
  public enum CCError : SesameSDK.CC.CCCryptorStatus, Swift.Error {
    case paramError
    case bufferTooSmall
    case memoryFailure
    case alignmentError
    case decodeError
    case unimplemented
    case overflow
    case rngFailure
    case unspecifiedError
    case callSequenceError
    case keySizeError
    case invalidKey
    public static var debugLevel: Swift.Int
    public typealias RawValue = SesameSDK.CC.CCCryptorStatus
    public init?(rawValue: SesameSDK.CC.CCCryptorStatus)
    public var rawValue: SesameSDK.CC.CCCryptorStatus {
      get
    }
  }
  public static func generateRandom(_ size: Swift.Int) -> Foundation.Data
  public typealias CCDigestAlgorithm = Swift.UInt32
  public enum DigestAlgorithm : SesameSDK.CC.CCDigestAlgorithm {
    case none
    case md5
    case rmd128, rmd160, rmd256, rmd320
    case sha1
    case sha224, sha256, sha384, sha512
    public typealias RawValue = SesameSDK.CC.CCDigestAlgorithm
    public init?(rawValue: SesameSDK.CC.CCDigestAlgorithm)
    public var rawValue: SesameSDK.CC.CCDigestAlgorithm {
      get
    }
  }
  public static func digest(_ data: Foundation.Data, alg: SesameSDK.CC.DigestAlgorithm) -> Foundation.Data
  public typealias CCHmacAlgorithm = Swift.UInt32
  public enum HMACAlg : SesameSDK.CC.CCHmacAlgorithm {
    case sha1, md5, sha256, sha384, sha512, sha224
    public typealias RawValue = SesameSDK.CC.CCHmacAlgorithm
    public init?(rawValue: SesameSDK.CC.CCHmacAlgorithm)
    public var rawValue: SesameSDK.CC.CCHmacAlgorithm {
      get
    }
  }
  public static func HMAC(_ data: Foundation.Data, alg: SesameSDK.CC.HMACAlg, key: Foundation.Data) -> Foundation.Data
  public typealias CCOperation = Swift.UInt32
  public enum OpMode : SesameSDK.CC.CCOperation {
    case encrypt, decrypt
    public typealias RawValue = SesameSDK.CC.CCOperation
    public init?(rawValue: SesameSDK.CC.CCOperation)
    public var rawValue: SesameSDK.CC.CCOperation {
      get
    }
  }
  public typealias CCMode = Swift.UInt32
  public enum BlockMode : SesameSDK.CC.CCMode {
    case ecb, cbc, cfb, ctr, f8, lrw, ofb, xts, rc4, cfb8
    public typealias RawValue = SesameSDK.CC.CCMode
    public init?(rawValue: SesameSDK.CC.CCMode)
    public var rawValue: SesameSDK.CC.CCMode {
      get
    }
  }
  public enum AuthBlockMode : SesameSDK.CC.CCMode {
    case gcm, ccm
    public typealias RawValue = SesameSDK.CC.CCMode
    public init?(rawValue: SesameSDK.CC.CCMode)
    public var rawValue: SesameSDK.CC.CCMode {
      get
    }
  }
  public typealias CCAlgorithm = Swift.UInt32
  public enum Algorithm : SesameSDK.CC.CCAlgorithm {
    case aes, des, threeDES, cast, rc4, rc2, blowfish
    public typealias RawValue = SesameSDK.CC.CCAlgorithm
    public init?(rawValue: SesameSDK.CC.CCAlgorithm)
    public var rawValue: SesameSDK.CC.CCAlgorithm {
      get
    }
  }
  public typealias CCPadding = Swift.UInt32
  public enum Padding : SesameSDK.CC.CCPadding {
    case noPadding, pkcs7Padding
    public typealias RawValue = SesameSDK.CC.CCPadding
    public init?(rawValue: SesameSDK.CC.CCPadding)
    public var rawValue: SesameSDK.CC.CCPadding {
      get
    }
  }
  public static func crypt(_ opMode: SesameSDK.CC.OpMode, blockMode: SesameSDK.CC.BlockMode, algorithm: SesameSDK.CC.Algorithm, padding: SesameSDK.CC.Padding, data: Foundation.Data, key: Foundation.Data, iv: Foundation.Data) throws -> Foundation.Data
  public static func cryptAuth(_ opMode: SesameSDK.CC.OpMode, blockMode: SesameSDK.CC.AuthBlockMode, algorithm: SesameSDK.CC.Algorithm, data: Foundation.Data, aData: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, tagLength: Swift.Int) throws -> Foundation.Data
  public static func digestAvailable() -> Swift.Bool
  public static func randomAvailable() -> Swift.Bool
  public static func hmacAvailable() -> Swift.Bool
  public static func cryptorAvailable() -> Swift.Bool
  public static func available() -> Swift.Bool
  @_hasMissingDesignatedInitializers open class GCM {
    public static func crypt(_ opMode: SesameSDK.CC.OpMode, algorithm: SesameSDK.CC.Algorithm, data: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, aData: Foundation.Data, tagLength: Swift.Int) throws -> (Foundation.Data, Foundation.Data)
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class CCM {
    public static func crypt(_ opMode: SesameSDK.CC.OpMode, algorithm: SesameSDK.CC.Algorithm, data: Foundation.Data, key: Foundation.Data, iv: Foundation.Data, aData: Foundation.Data, tagLength: Swift.Int) throws -> (Foundation.Data, Foundation.Data)
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class RSA {
    public typealias CCAsymmetricPadding = Swift.UInt32
    public enum AsymmetricPadding : SesameSDK.CC.RSA.CCAsymmetricPadding {
      case pkcs1
      case oaep
      public typealias RawValue = SesameSDK.CC.RSA.CCAsymmetricPadding
      public init?(rawValue: SesameSDK.CC.RSA.CCAsymmetricPadding)
      public var rawValue: SesameSDK.CC.RSA.CCAsymmetricPadding {
        get
      }
    }
    public enum AsymmetricSAPadding : Swift.UInt32 {
      case pkcs15
      case pss
      public typealias RawValue = Swift.UInt32
      public init?(rawValue: Swift.UInt32)
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func generateKeyPair(_ keySize: Swift.Int = 4096) throws -> (Foundation.Data, Foundation.Data)
    public static func getPublicKeyFromPrivateKey(_ derKey: Foundation.Data) throws -> Foundation.Data
    public static func encrypt(_ data: Foundation.Data, derKey: Foundation.Data, tag: Foundation.Data, padding: SesameSDK.CC.RSA.AsymmetricPadding, digest: SesameSDK.CC.DigestAlgorithm) throws -> Foundation.Data
    public static func decrypt(_ data: Foundation.Data, derKey: Foundation.Data, tag: Foundation.Data, padding: SesameSDK.CC.RSA.AsymmetricPadding, digest: SesameSDK.CC.DigestAlgorithm) throws -> (Foundation.Data, Swift.Int)
    public static func sign(_ message: Foundation.Data, derKey: Foundation.Data, padding: SesameSDK.CC.RSA.AsymmetricSAPadding, digest: SesameSDK.CC.DigestAlgorithm, saltLen: Swift.Int) throws -> Foundation.Data
    public static func verify(_ message: Foundation.Data, derKey: Foundation.Data, padding: SesameSDK.CC.RSA.AsymmetricSAPadding, digest: SesameSDK.CC.DigestAlgorithm, saltLen: Swift.Int, signedData: Foundation.Data) throws -> Swift.Bool
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class DH {
    public enum DHParam {
      case rfc3526Group5
      case rfc2409Group2
      public static func == (a: SesameSDK.CC.DH.DHParam, b: SesameSDK.CC.DH.DHParam) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    open class DH {
      public init(dhParam: SesameSDK.CC.DH.DHParam) throws
      open func generateKey() throws -> Foundation.Data
      open func computeKey(_ peerKey: Foundation.Data) throws -> Foundation.Data
      @objc deinit
    }
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class EC {
    public static func generateKeyPair(_ keySize: Swift.Int) throws -> (Foundation.Data, Foundation.Data)
    public static func getPublicKeyFromPrivateKey(_ privateKey: Foundation.Data) throws -> Foundation.Data
    public static func signHash(_ privateKey: Foundation.Data, hash: Foundation.Data) throws -> Foundation.Data
    public static func verifyHash(_ publicKey: Foundation.Data, hash: Foundation.Data, signedData: Foundation.Data) throws -> Swift.Bool
    public static func computeSharedSecret(_ privateKey: Foundation.Data, publicKey: Foundation.Data) throws -> Foundation.Data
    public struct KeyComponents {
      public init(_ keySize: Swift.Int, _ x: Foundation.Data, _ y: Foundation.Data, _ d: Foundation.Data)
      public var keySize: Swift.Int
      public var x: Foundation.Data
      public var y: Foundation.Data
      public var d: Foundation.Data
    }
    public static func getPublicKeyComponents(_ keyData: Foundation.Data) throws -> SesameSDK.CC.EC.KeyComponents
    public static func getPrivateKeyComponents(_ keyData: Foundation.Data) throws -> SesameSDK.CC.EC.KeyComponents
    public static func createFromData(_ keySize: Darwin.size_t, _ x: Foundation.Data, _ y: Foundation.Data) throws -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class CRC {
    public typealias CNcrc = Swift.UInt32
    public enum Mode : SesameSDK.CC.CRC.CNcrc {
      case crc8, crc8ICODE, crc8ITU, crc8ROHC, crc8WCDMA, crc16, crc16CCITTTrue, crc16CCITTFalse, crc16USB, crc16XMODEM, crc16DECTR, crc16DECTX, crc16ICODE, crc16VERIFONE, crc16A, crc16B, crc16Fletcher, crc32Adler, crc32, crc32CASTAGNOLI, crc32BZIP2, crc32MPEG2, crc32POSIX, crc32XFER, crc64ECMA182
      public typealias RawValue = SesameSDK.CC.CRC.CNcrc
      public init?(rawValue: SesameSDK.CC.CRC.CNcrc)
      public var rawValue: SesameSDK.CC.CRC.CNcrc {
        get
      }
    }
    public static func crc(_ input: Foundation.Data, mode: SesameSDK.CC.CRC.Mode) throws -> Swift.UInt64
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class CMAC {
    public static func AESCMAC(_ data: Foundation.Data, key: Foundation.Data) -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class KeyDerivation {
    public typealias CCPseudoRandomAlgorithm = Swift.UInt32
    public enum PRFAlg : SesameSDK.CC.KeyDerivation.CCPseudoRandomAlgorithm {
      case sha1, sha224, sha256, sha384, sha512
      public typealias RawValue = SesameSDK.CC.KeyDerivation.CCPseudoRandomAlgorithm
      public init?(rawValue: SesameSDK.CC.KeyDerivation.CCPseudoRandomAlgorithm)
      public var rawValue: SesameSDK.CC.KeyDerivation.CCPseudoRandomAlgorithm {
        get
      }
    }
    public static func PBKDF2(_ password: Swift.String, salt: Foundation.Data, prf: SesameSDK.CC.KeyDerivation.PRFAlg, rounds: Swift.UInt32) throws -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class KeyWrap {
    public static let rfc3394IV: Foundation.Data
    public static func SymmetricKeyWrap(_ iv: Foundation.Data, kek: Foundation.Data, rawKey: Foundation.Data) throws -> Foundation.Data
    public static func SymmetricKeyUnwrap(_ iv: Foundation.Data, kek: Foundation.Data, wrappedKey: Foundation.Data) throws -> Foundation.Data
    public static func available() -> Swift.Bool
    @objc deinit
  }
  @objc deinit
}
extension Data {
  public func hexadecimalString() -> Swift.String
  public func arrayOfBytes() -> [Swift.UInt8]
}
extension String {
  public func dataFromHexadecimalString() -> Foundation.Data?
}
extension URL {
  public static func storeURL(for appGroup: Swift.String?, databaseName: Swift.String) -> Foundation.URL?
}
@_hasMissingDesignatedInitializers public class CHDeviceKey : Swift.Codable {
  public var deviceUUID: Foundation.UUID
  public var deviceModel: Swift.String
  public var historyTag: Foundation.Data?
  public var keyIndex: Swift.String
  public var secretKey: Swift.String
  public var sesame2PublicKey: Swift.String
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Array {
  public func executeIfPresent(_ closure: ([Element]) -> Swift.Void)
}
public typealias CHResult<T> = (Swift.Result<SesameSDK.CHResultState<T>, Swift.Error>) -> ()
@_hasMissingDesignatedInitializers public class CHResultState<T> {
  public var data: T
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHResultStateCache<T> : SesameSDK.CHResultState<T> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHResultStateNetworks<T> : SesameSDK.CHResultState<T> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHResultStateBLE<T> : SesameSDK.CHResultState<T> {
  @objc deinit
}
public enum Sesame2WifiMQTTStatus : Swift.Int {
  case unknown
  case connecting
  case connected
  case disconnected
  case connectionRefused
  case connectionError
  case protocolError
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum CHProductModel : Swift.UInt16 {
  case sesame2
  public typealias RawValue = Swift.UInt16
  public init?(rawValue: Swift.UInt16)
  public var rawValue: Swift.UInt16 {
    get
  }
}
@_hasMissingDesignatedInitializers public class ServerError : Swift.Codable {
  public var message: Swift.String
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol CHBleManagerDelegate : AnyObject {
  func didDiscoverUnRegisteredSesame2s(sesame2s: [SesameSDK.CHSesame2])
  func didDiscoverUnRegisteredSesame2(sesame2: SesameSDK.CHSesame2)
}
extension CHBleManagerDelegate {
  public func didDiscoverUnRegisteredSesame2s(sesame2s: [SesameSDK.CHSesame2])
  public func didDiscoverUnRegisteredSesame2(sesame2: SesameSDK.CHSesame2)
}
public enum CHDeviceLoginStatus : Swift.String {
  case logined
  case unlogined
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class CHAccountManager {
  public static let shared: SesameSDK.CHAccountManager!
  @objc deinit
}
public protocol DiffAware {
  associatedtype DiffId : Swift.Hashable
  var diffId: Self.DiffId { get }
  static func compareContent(_ a: Self, _ b: Self) -> Swift.Bool
}
extension DiffAware where Self : Swift.Hashable {
  public var diffId: Self {
    get
  }
  public static func compareContent(_ a: Self, _ b: Self) -> Swift.Bool
}
extension Int : SesameSDK.DiffAware {
  public typealias DiffId = Swift.Int
}
extension String : SesameSDK.DiffAware {
  public typealias DiffId = Swift.String
}
extension Character : SesameSDK.DiffAware {
  public typealias DiffId = Swift.Character
}
extension UUID : SesameSDK.DiffAware {
  public typealias DiffId = Foundation.UUID
}
extension UIDevice {
  public static let modelName: Swift.String
}
public enum Sesame2RetCodeType : Swift.UInt8 {
  case none
  case success
  case failEngage
  case failMoveStart
  case failMove
  case failCheck
  case failDetach
  case failLoosen
  case aborted
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.UInt8
  public init?(rawValue: Swift.UInt8)
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct Sesame2BleAdvParameter : SesameSDK.CHSesame2BleAdvParameter {
  public var interval: Swift.Double
  public var txPower: Swift.Int8
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHBleManager : ObjectiveC.NSObject {
  public static let shared: SesameSDK.CHBleManager
  weak public var delegate: SesameSDK.CHBleManagerDelegate?
  public func disableScan(result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  public func enableScan(result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  public func disConnectAll(result: @escaping (SesameSDK.CHResult<SesameSDK.CHEmpty>))
  @objc deinit
}
extension CHBleManager : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
}
extension CHBleManager : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
public protocol CHExtensionListenerDelegate : AnyObject {
  func receiveNotification(_ notificationIdentifier: Swift.String)
}
final public class CHExtensionListener {
  public static let containingAppDidBecomeActive: Swift.String
  public static let containingAppWillResignActive: Swift.String
  public static let widgetDidBecomeActive: Swift.String
  public static let widgetWillResignActive: Swift.String
  public init()
  final public func registerObserver<P>(_ listener: P, withIdentifier identifier: Swift.String) where P : SesameSDK.CHExtensionListenerDelegate
  final public func unregisterIdentifier(_ identifier: Swift.String)
  final public func unregisterAll()
  public static func post(notification: Swift.String)
  @objc deinit
}
final public class WagnerFischer<T> where T : SesameSDK.DiffAware {
  public init(reduceMove: Swift.Bool = false)
  final public func diff(old: [T], new: [T]) -> [SesameSDK.Change<T>]
  @objc deinit
}
extension CHIoTOperator {
  @discardableResult
  public func publish(keyValues: [Swift.String : Any]) -> Swift.Bool
  public func subscribe(handler: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)
  public func unregister()
}
@_hasMissingDesignatedInitializers final public class CHConfiguration {
  public static let shared: SesameSDK.CHConfiguration
  final public func setAPIKey(_ key: Swift.String)
  final public func apiKey() -> Swift.String?
  final public func appGroup() -> Swift.String?
  final public func setIdentityPoolId(_ identityPoolId: Swift.String)
  final public func identityPoolId() -> Swift.String?
  @discardableResult
  final public func setValue(_ value: Any, forKey key: Swift.String) -> Swift.Bool
  final public func getValueForKey(_ key: Swift.String) -> Any?
  @objc deinit
}
public protocol CHSesame2MechStatus {
  func getBatteryVoltage() -> Swift.Float
  func getBatteryPrecentage() -> Swift.Int
  func retCodeType() -> SesameSDK.Sesame2RetCodeType
  var position: Swift.Int16 { get }
  var isClutchFailed: Swift.Bool { get }
  var isInLockRange: Swift.Bool { get }
  var isInUnlockRange: Swift.Bool { get }
}
public protocol CHSesame2MechSettings {
  var lockPosition: Swift.Int16 { get }
  var unlockPosition: Swift.Int16 { get }
  func isConfigured() -> Swift.Bool
}
public enum CHSesame2Intention : Swift.String {
  case locking, unlocking, movingToUnknownTarget, idle
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol CHSesame2BleAdvParameter {
  var interval: Swift.Double { get }
  var txPower: Swift.Int8 { get }
}
@_hasMissingDesignatedInitializers public class CHEmpty {
  @objc deinit
}
public enum CHSesame2ShadowStatus {
  case locked
  case unlocked
  case moved
  public func loginStatus() -> SesameSDK.CHDeviceLoginStatus
  public func description() -> Swift.String
  public static func == (a: SesameSDK.CHSesame2ShadowStatus, b: SesameSDK.CHSesame2ShadowStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum CHSesame2Status {
  case noBleSignal
  case receivedBle
  case bleConnecting
  case reset
  case waitingGatt
  case bleLogining
  case readyToRegister
  case registering
  case locked
  case unlocked
  case moved
  case noSettings
  case dfumode
  public func description() -> Swift.String
  public func loginStatus() -> SesameSDK.CHDeviceLoginStatus
  public static func == (a: SesameSDK.CHSesame2Status, b: SesameSDK.CHSesame2Status) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension CHIoTOperator {
  public func post(_ keyValues: [Swift.String : Any], handler: @escaping (Swift.Result<Any?, Swift.Error>) -> Swift.Void)
  public func get(_ handler: @escaping (Swift.Result<Any?, Swift.Error>) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers public class CHDeviceManager : ObjectiveC.NSObject {
  public static let shared: SesameSDK.CHDeviceManager
  public func getSesame2s(result: @escaping (SesameSDK.CHResult<[SesameSDK.CHSesame2]>))
  public func receiveSesame2Keys(sesame2Keys: [Swift.String], result: @escaping (SesameSDK.CHResult<[SesameSDK.CHSesame2]>))
  public func receiveSesame2Keys(sesame2Keys: Swift.String..., result: @escaping (SesameSDK.CHResult<[SesameSDK.CHSesame2]>))
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class CHSesame2HistoryData {
  final public let recordID: Swift.Int32
  final public let historyTag: Foundation.Data?
  final public let date: Foundation.Date
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHSesame2AutoLockUpdatedHistoryData : SesameSDK.CHSesame2HistoryData {
  final public let enabledBefore: Swift.Int16
  final public let enabledAfter: Swift.Int16
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHSesame2MechSettingUpdatedHistoryData : SesameSDK.CHSesame2HistoryData {
  final public let lockTargetBefore: Swift.Int16
  final public let unlockTargetBefore: Swift.Int16
  final public let lockTargetAfter: Swift.Int16
  final public let unlockTargetAfter: Swift.Int16
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHSesame2TimeChangedHistoryData : SesameSDK.CHSesame2HistoryData {
  final public let timeAfter: Foundation.Date
  final public let timeBefore: Foundation.Date
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHSesame2BleAdvParameterUpdatedHistoryData : SesameSDK.CHSesame2HistoryData {
  public var intervalBefore: Swift.Double {
    get
    set
  }
  public var intervalAfter: Swift.Double {
    get
    set
  }
  final public let dbmBefore: Swift.Int8
  final public let dbmAfter: Swift.Int8
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CHSesame2DriveFailedHistoryData : SesameSDK.CHSesame2HistoryData {
  final public let stoppedPosition: Swift.Int16
  final public let fsmRetCode: Swift.Int8
  final public let deviceStatus: SesameSDK.CHSesame2Status
  @objc deinit
}
public enum CHSesame2History {
  case manualElse(SesameSDK.CHSesame2HistoryData)
  case manualLocked(SesameSDK.CHSesame2HistoryData)
  case manualUnlocked(SesameSDK.CHSesame2HistoryData)
  case bleLock(SesameSDK.CHSesame2HistoryData)
  case bleUnLock(SesameSDK.CHSesame2HistoryData)
  case autoLock(SesameSDK.CHSesame2HistoryData)
  case autoLockUpdated(SesameSDK.CHSesame2AutoLockUpdatedHistoryData)
  case mechSettingUpdated(SesameSDK.CHSesame2MechSettingUpdatedHistoryData)
  case timeChanged(SesameSDK.CHSesame2TimeChangedHistoryData)
  case bleAdvParameterUpdated(SesameSDK.CHSesame2BleAdvParameterUpdatedHistoryData)
  case driveLocked(SesameSDK.CHSesame2HistoryData)
  case driveUnlocked(SesameSDK.CHSesame2HistoryData)
  case driveFailed(SesameSDK.CHSesame2DriveFailedHistoryData)
  case none(SesameSDK.CHSesame2HistoryData)
}
@_inheritsConvenienceInitializers @objc(CHDevice) public class CHDevice : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension CHDevice {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SesameSDK.CHDevice>
  @objc @NSManaged dynamic public var deviceModel: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var deviceUUID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var historyTag: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var keyIndex: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var secretKey: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sesame2PublicKey: Swift.String? {
    @objc get
    @objc set
  }
}
@available(*, unavailable, renamed: "Connection")
extension SesameSDK.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension SesameSDK.Reachability.NetworkStatus : Swift.Hashable {}
extension SesameSDK.Reachability.Connection : Swift.Equatable {}
extension SesameSDK.Reachability.Connection : Swift.Hashable {}
extension SesameSDK.SwKeyConvert.SwError : Swift.Equatable {}
extension SesameSDK.SwKeyConvert.SwError : Swift.Hashable {}
extension SesameSDK.PEM.EncryptedPrivateKey.EncMode : Swift.Equatable {}
extension SesameSDK.PEM.EncryptedPrivateKey.EncMode : Swift.Hashable {}
extension SesameSDK.CC.CCError : Swift.Equatable {}
extension SesameSDK.CC.CCError : Swift.Hashable {}
extension SesameSDK.CC.CCError : Swift.RawRepresentable {}
extension SesameSDK.CC.DigestAlgorithm : Swift.Equatable {}
extension SesameSDK.CC.DigestAlgorithm : Swift.Hashable {}
extension SesameSDK.CC.DigestAlgorithm : Swift.RawRepresentable {}
extension SesameSDK.CC.HMACAlg : Swift.Equatable {}
extension SesameSDK.CC.HMACAlg : Swift.Hashable {}
extension SesameSDK.CC.HMACAlg : Swift.RawRepresentable {}
extension SesameSDK.CC.OpMode : Swift.Equatable {}
extension SesameSDK.CC.OpMode : Swift.Hashable {}
extension SesameSDK.CC.OpMode : Swift.RawRepresentable {}
extension SesameSDK.CC.BlockMode : Swift.Equatable {}
extension SesameSDK.CC.BlockMode : Swift.Hashable {}
extension SesameSDK.CC.BlockMode : Swift.RawRepresentable {}
extension SesameSDK.CC.AuthBlockMode : Swift.Equatable {}
extension SesameSDK.CC.AuthBlockMode : Swift.Hashable {}
extension SesameSDK.CC.AuthBlockMode : Swift.RawRepresentable {}
extension SesameSDK.CC.Algorithm : Swift.Equatable {}
extension SesameSDK.CC.Algorithm : Swift.Hashable {}
extension SesameSDK.CC.Algorithm : Swift.RawRepresentable {}
extension SesameSDK.CC.Padding : Swift.Equatable {}
extension SesameSDK.CC.Padding : Swift.Hashable {}
extension SesameSDK.CC.Padding : Swift.RawRepresentable {}
extension SesameSDK.CC.RSA.AsymmetricPadding : Swift.Equatable {}
extension SesameSDK.CC.RSA.AsymmetricPadding : Swift.Hashable {}
extension SesameSDK.CC.RSA.AsymmetricPadding : Swift.RawRepresentable {}
extension SesameSDK.CC.RSA.AsymmetricSAPadding : Swift.Equatable {}
extension SesameSDK.CC.RSA.AsymmetricSAPadding : Swift.Hashable {}
extension SesameSDK.CC.RSA.AsymmetricSAPadding : Swift.RawRepresentable {}
extension SesameSDK.CC.DH.DHParam : Swift.Equatable {}
extension SesameSDK.CC.DH.DHParam : Swift.Hashable {}
extension SesameSDK.CC.CRC.Mode : Swift.Equatable {}
extension SesameSDK.CC.CRC.Mode : Swift.Hashable {}
extension SesameSDK.CC.CRC.Mode : Swift.RawRepresentable {}
extension SesameSDK.CC.KeyDerivation.PRFAlg : Swift.Equatable {}
extension SesameSDK.CC.KeyDerivation.PRFAlg : Swift.Hashable {}
extension SesameSDK.CC.KeyDerivation.PRFAlg : Swift.RawRepresentable {}
extension SesameSDK.Sesame2WifiMQTTStatus : Swift.Equatable {}
extension SesameSDK.Sesame2WifiMQTTStatus : Swift.Hashable {}
extension SesameSDK.Sesame2WifiMQTTStatus : Swift.RawRepresentable {}
extension SesameSDK.CHProductModel : Swift.Equatable {}
extension SesameSDK.CHProductModel : Swift.Hashable {}
extension SesameSDK.CHProductModel : Swift.RawRepresentable {}
extension SesameSDK.CHDeviceLoginStatus : Swift.Equatable {}
extension SesameSDK.CHDeviceLoginStatus : Swift.Hashable {}
extension SesameSDK.CHDeviceLoginStatus : Swift.RawRepresentable {}
extension SesameSDK.Sesame2RetCodeType : Swift.Equatable {}
extension SesameSDK.Sesame2RetCodeType : Swift.Hashable {}
extension SesameSDK.Sesame2RetCodeType : Swift.RawRepresentable {}
extension SesameSDK.CHSesame2Intention : Swift.Equatable {}
extension SesameSDK.CHSesame2Intention : Swift.Hashable {}
extension SesameSDK.CHSesame2Intention : Swift.RawRepresentable {}
extension SesameSDK.CHSesame2ShadowStatus : Swift.Equatable {}
extension SesameSDK.CHSesame2ShadowStatus : Swift.Hashable {}
extension SesameSDK.CHSesame2Status : Swift.Equatable {}
extension SesameSDK.CHSesame2Status : Swift.Hashable {}
